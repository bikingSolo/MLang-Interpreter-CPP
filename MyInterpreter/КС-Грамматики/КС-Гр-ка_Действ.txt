
{{ X }} - итерация { X^n| n>=0 }
[[ a|b ]] - обязательно должен быть либо a либо b 
[ a ] - a либо есть либо нет { a^n| 0 <= n <= 1 }
{ X } - скобки языка

------------------------------------------- КС-Гр-ка с Действиями ----------------------------------------------------------

P --> program { S O Op}

S --> {{ struct LEX_ID { O }; }}   - структура 

O --> {{ [[ int|string|bool|struct LEX_ID <check_S> ]] <type = [[ int|srting|bool ]]> [[ LEX_ID <st_int.push(c_val); dec(type); putStype> | LEX_ID <st_int.push(c_val); dec(type); check_id();> = C <eq_type()> ]] 
{{ , [[ LEX_ID <st_int.push(c_val); dec(type);> | LEX_ID <st_int.push(c_val); dec(type); check_id();> = C <eq_type()> ]] }}; }}   

C --> [+|-] LEX_NUM | LEX_LINE | LEX_TRUE | LEX_FALSE  < st_lex.push(c_type) >

Op -->                           - операторы 
   if ( B <eq_bool()> ) Op else Op 
|  for ( [ B <st_lex.pop()> ]; [ B <eq_bool()> ]; [ B <st_lex.pop()> ] ) Op
|  while ( B <eq_bool()> ) Op
|  break;
|  goto LEX_ID;
|  read ( LEX_ID <check_id_in_read()> );
|  write ( B <st_lex.pop()> {{ , B <st_lex.pop()> }} );
|  {  {{ Op }}  }                       - составной оператор 
|  LEX_ID : Op                          - помеченный оператор 
|  A;
 
Ops --> {{ Op }}


Выражение - чем ниже, тем выше приоритет:

A   --> LEX_ID <check_id()> = A < from_st(st_lex, x); dup(); st_lex.push(x); eq_type()> | B 
B   --> B1 {{ or <st_lex.push(c_type)>  B1 <check_op()> }}        
B1  --> B2 {{ and <st_lex.push(c_type)> B2 <check_op()> }}
B2  --> B3 [[ <|>|<=|>=|==|!= ]] <st_lex.push(c_type)> B3 <check_op()> | B3
B3  --> B4 {{ [[ +|- ]] <st_lex.push(c_type)> B4 <check_op()> }}
B4  --> B5 {{ [[ *|/ ]] <st_lex.push(c_type)> B5 <check_op()> }}
B5  --> C | LEX_ID <check_id()> | not B5 <check_not()> | -B5 <check_minus()> | ( B )


-----------------------------------------------------------------------------------------------------------------


двуместные операции : +, -, *, /, <, >, <=, >=, ==, !=, and, or, not

двуместные операции для int: +, -, *, /, <, >, <=, >=, ==, !=

двуместные операции для bool: and, or

двуметсные операции для string: +, <, >,  ==, !=

двуместные операции для int\string: -, *, /, <=, >=, 

двуместные операции  int ∩ string: +, <, >, ==, !=